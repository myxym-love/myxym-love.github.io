{"meta":{"title":"毛宇的个人博客","subtitle":"","description":"","author":"Mao Yu","url":"https://myxym-love.github.io/my.github.io","root":"/my.github.io/"},"pages":[],"posts":[{"title":"","slug":"服务器之间免密登录","date":"2022-01-02T03:55:45.453Z","updated":"2021-11-15T08:02:33.932Z","comments":true,"path":"2022/01/02/服务器之间免密登录/","link":"","permalink":"https://myxym-love.github.io/my.github.io/2022/01/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/","excerpt":"","text":"1.云服务器之间实现免密登录1. 安装ssh1yum install -y ssh 注：每台服务器都要安装ssh 2.在每台服务器上生成公钥1ssh-keygen 3.服务器ip映射使用命令 1vim /etc/hosts 添加ip映射,例如47.100.227.19 master 有几台服务器要实现互相免密就添加几个映射 4.公钥互相拷贝到其他服务器1.在master服务器上执行 123ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2 2.在slave1上执行 123ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2 23.在slave上执行 123ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2 注：拷贝的时候是需要输入密码,这也是最后一次输入密码,之后就可以实现免密登录了 2.Windows与云服务器之间实现免密登录1.在Windows主机安装openSSH 出现如图所以表示安装成功 2.生成公钥1ssh-keygen 生成的默认文件路径是C:\\Users\\ASUS.ssh 把Windows中的id.rsa.pub的内容追加到云服务器下.ssh/authorized_keys中 至此就可以实现免密登录了","categories":[],"tags":[]},{"title":"","slug":"Linux下安装Redis6.X","date":"2022-01-02T03:55:45.447Z","updated":"2021-07-26T10:56:31.250Z","comments":true,"path":"2022/01/02/Linux下安装Redis6.X/","link":"","permalink":"https://myxym-love.github.io/my.github.io/2022/01/02/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Redis6.X/","excerpt":"","text":"Redis学习笔记Linux下安装Redis6.X注意：安装Redis6.X版本需要gcc9.X以上版本 1.安装gcc安装包的镜像源 1yum install centos-release-scl 2.安装gcc9和g++9 1yum install devtoolset-9 3.上传redis6.x到Centos7服务器上，使用RailDrive连接服务器进行上传 cd /usr/local目录下新建一个software文件夹,之后把所有得软件上传到software文件夹下，方便管理 4.解压redis tar -zxvf redis-6.2.5.tar.gz 5.进入redis-6.2.5目录下，执行以下命令 1make 6.redis的默认安装路径 /usr/local/bin 7.在/usr/local/bin目录下新建一个mconfig目录,把redis配置文件redis.conf拷贝一份到此目录下，以后就使用mconfig下的配置文件启动 8.redis默认不是后台启动的 9.vim redis.conf进行编辑，修改配置 damonize no no改为yes 10.启动redis服务，通过指定的配置文件启动，在/usr/local/bin目录下执行 1redis-server mconfig/redis.conf 1reids-cli -p 6379 11.关闭redis服务shutdown Redis基础知识123456789127.0.0.1:6379&gt; select 1 #切换数据库OK127.0.0.1:6379[1]&gt; DBSIZE #查看数据库的大小(integer) 0127.0.0.1:6379[1]&gt; set name myxymOK127.0.0.1:6379[1]&gt; DBSIZE(integer) 1127.0.0.1:6379[1]&gt; 12345678910111213127.0.0.1:6379&gt; select 1OK127.0.0.1:6379[1]&gt; DBSIZE(integer) 0127.0.0.1:6379[1]&gt; set name myxymOK127.0.0.1:6379[1]&gt; DBSIZE(integer) 1127.0.0.1:6379[1]&gt; FLUSHDB #清除当前数据库OK127.0.0.1:6379[1]&gt; DBSIZE(integer) 0127.0.0.1:6379[1]&gt; FLUSHALL 清楚所有数据库数据 五大数据类型1.Redis-key​ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647127.0.0.1:6379&gt; set name myxymOK127.0.0.1:6379&gt; get name&quot;myxym&quot;127.0.0.1:6379&gt; EXPIRE name 60 #设置过期时间(integer) 1127.0.0.1:6379&gt; ttl name #查看过期倒计时(integer) 58127.0.0.1:6379&gt; ttl name(integer) 57127.0.0.1:6379&gt; ttl name(integer) 54127.0.0.1:6379&gt; ttl anem(integer) -2127.0.0.1:6379&gt; ttl name(integer) 35127.0.0.1:6379&gt; get name&quot;myxym&quot;127.0.0.1:6379&gt; move name 1 #从当前数据库移除key(integer) 0127.0.0.1:6379&gt; get name&quot;myxym&quot;127.0.0.1:6379&gt; keys *1) &quot;name&quot;127.0.0.1:6379&gt; tt lname(error) ERR unknown command `tt`, with args beginning with: `lname`, 127.0.0.1:6379&gt; ttl name(integer) 2127.0.0.1:6379&gt; ttl name(integer) -2127.0.0.1:6379&gt; get name(nil)127.0.0.1:6379&gt; set name myxymOK127.0.0.1:6379&gt; ttl name(integer) -1127.0.0.1:6379&gt; ttl name(integer) -1127.0.0.1:6379&gt; get name&quot;myxym&quot;127.0.0.1:6379&gt; move name 1(integer) 0127.0.0.1:6379&gt; type name #查看当前key的类型string127.0.0.1:6379&gt; 2.String","categories":[],"tags":[]},{"title":"","slug":"Git使用教程","date":"2022-01-02T03:55:45.439Z","updated":"2021-11-24T12:10:02.971Z","comments":true,"path":"2022/01/02/Git使用教程/","link":"","permalink":"https://myxym-love.github.io/my.github.io/2022/01/02/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"Git使用教程1.如何把本地的项目上传到GitHub上1.打开Git Bash进入到要上传的项目的目录下 2.配置用户名和邮箱 12git config --global user.name &quot;Your username&quot;git config --global user.email &quot;Your email&quot; 3.在GitHub上设置本地的ssh公钥 （1）在本地生成ssh公钥私钥 1ssh-keygen 生成的.ssh文件默认在C:\\Users\\ASUS\\.ssh (ASUS是我电脑的名字) 在.ssh文件下有id_rsa.pub文件,把里面的内容添加到你的GigHub的设置里 4.在你的GitHub上新建一个仓库,复制仓库的ssh地址 5.把你创建好的仓库克隆到你的项目文件夹下 1git clone git@github.com:myxym-love/javaweb.git (&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;:myxym-love/javaweb.git)换成你自己仓库地址 6.把你项目的下的所有文件以及文件夹(除了你拉取的仓库文件夹)复制到你拉取的仓库文件夹里 7.进去到你拉取的仓库文件夹里 123git add . (.表示所有文件)git commit -m &quot;描述&quot;git push -u origin master (第一次psuh要加-u)","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-02T02:39:48.366Z","updated":"2022-01-02T02:39:48.366Z","comments":true,"path":"2022/01/02/hello-world/","link":"","permalink":"https://myxym-love.github.io/my.github.io/2022/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}